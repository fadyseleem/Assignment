## Put comments here that give an overall description of what your
## functions do

## The fctn creates an object that can cache its inverse. It consists of four "base" functions:
## 1. set the matrix; 2. get the matrix; 
## 3. set the value of inverse; 4. get the value of the inverse 

makeCacheMatrix <- function(x = matrix()) {
    inv <- NULL
    set <- function(y) {
        x <<- y
        inv <<- NULL
    }
    get <- function() y
    setinv <- function(inverse) inv <<- inverse
    getinv <- function() inv
    list(set = set, 
         get = get,
         setinv = setinv,
         getinv = getinv)
}


## The function checks if the inverse of the matrix has been calculated
## is yes, it gets the inverse, skip computation, retrieve from the cache
## is no, it compute the inverse and set to cache

cacheSolve <- function(x, ...) {
        ## Return a matrix that is the inverse of 'x'
    inv <- x$getinv()
    if(!is.null(inv)){
        message("getting cached data")
        return(inv)
    }
    data <- x$get()
    inv <- solve(data, ...)
    x$setinv(inv)
    inv
}
